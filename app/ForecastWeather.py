import requests

import MathOthers

"""
This module provides functionality to retrieve weather forecasts for cities and points based on their geographical coordinates. 
It interacts with the OpenWeatherMap API to gather forecast data, such as rainfall, for the next 3 and 6 hours* and associates this information 
with cities or points generated by the 'MathOthers' module.

The module relies on the 'MathOthers' module to obtain a dictionary of cities or points, then fetches weather forecast data 
for each location using the OpenWeatherMap API and 'requests' package. The results are returned in a structured format (dictionary).

Notes:

    - Note that we are using the free subscription of the OpenWeatherMap API, which comes with certain restrictions on weather data availability.

    *- The "next 3 and 6 hours" refer to specific times. 
    The OpenWeatherMap API only provides data for hours that are multiples of 3 and 6.
        Example: 
            - Suppose the current time is 13:46:14. If we request rain information for the "next 3 hours" from the OpenWeatherMap API,
            we will receive data for 15:00:00, because 15 is the next multiple of 3 after 13.
        The same logic applies for the "next 6 hours".

Functions in this module:

- 'forWeatherCities()': Fetches weather forecast data for cities within a specified distance from a central location.
- 'forWeatherPoints()': Retrieves weather forecast data for specific points within a grid around a central location.
- 'parseWeatherInfo()': Parses weather forecast data for easy consumption in the final output.
"""

def forWeatherCities(dist, lat1, lon1):
    """
    Get forecasted weather in the respective cities that were returned by getCities in mathModule.

    Parameters:
        dist (float): The distance in kilometers within which to search for cities.
        lat1 (float): Latitude of the center location.
        lon1 (float): Longitude of the center location.

    Returns:
        cities (dict): A dictionary with city names, as keys, and forecast weather information, as values, including the coordinates calculated previously.
    """
    base_url = 'https://api.openweathermap.org/data/2.5/forecast'
    api_key = '##########'

    cities = MathOthers.getCities(dist, lat1, lon1)

    for city, coordinates in cities.items():
        lat, lon = coordinates['coord']
        paramsAdd = {
            'lat': lat,
            'lon': lon,
            'appid': api_key,
            'units': 'metric'
        }
        
        try:
            response = requests.get(base_url, params=paramsAdd)
            response.raise_for_status()
            weather_info = response.json()
            cities[city]['rain_forecast'] = parseWeatherInfo(weather_info)
        except:
            print(f"Failed to fetch weather data for {city}")
    
    return cities

def parseWeatherInfo(weatherInfo):
    """
    Parses weather information from the API response.

    Parameters:
        weatherInfo (dict): JSON response containing weather forecast data.

    Returns:
        parsed_data (dict): Parsed weather information.
    """

    parsed_data = {}
    # Range(2) means that we only want the next 3 and 6 hours of forecast weather for each city
    for i in range(2):
        index = 3 + 3 * i
        rain_key = f'rain_{index}h'
        percent_key = f'percent_{index}h'

        variables = weatherInfo['list'][i]
        rain_data = variables.get('rain', {'3h': 0})
        parsed_data[rain_key] = rain_data['3h']
        parsed_data[percent_key] = variables.get('pop',0)
    
    return parsed_data

def forWeatherPoints(dist,lat1,lon1,radius_point):
    
    """
    Get forecasted weather in the respective points that were returned by getPoints in mathModule.

    Parameters:
        dist (float): The distance in kilometers within which to search for cities.
        lat1 (float): Latitude of the center location.
        lon1 (float): Longitude of the center location.
        radius_point (float): distance, in kilometers, between points.

    Returns:
        points (dict): A dictionary with the several points, as keys, and forecast weather information, as values, including the coordinates calculated previously.
    """
    
    base_url = 'https://api.openweathermap.org/data/2.5/forecast?'
    api_key = 'cd625bdba0ced920ac5b1dc2f68a634f'
    
    points = MathOthers.getPoints(dist,lat1,lon1,radius_point)
    
    for point,coordinates in points.items():
        
        lat,lon = coordinates['coord']
        
        paramsAdd = {
            'lat': lat,
            'lon': lon,
            'appid': api_key,
            'units': 'metric'
        }
        
        try:
            response = requests.get(base_url, params=paramsAdd)
            response.raise_for_status()
            weather_info = response.json()
            points[point]['weather'] = parseWeatherInfo(weather_info)
        except:
            print(f"Failed to fetch weather data for {point}")
        
    return points
