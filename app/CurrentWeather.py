import requests

import MathOthers

"""
This module provides functionality for fetching current weather data for cities or points based on their geographical coordinates. 
It utilizes the OpenWeatherMap API to retrieve weather conditions, such as current rainfall, and associates this information 
with the cities or points generated by the 'MathOthers' module.

The module interacts with functions in the 'MathOthers' module to get a dictionary of cities or points and then 
requests weather data (using 'requests' package) for each location, returning the results in a structured format (dictionary).

Notes:
    - Note that we are using the free subscription of the OpenWeatherMap API, which comes with certain restrictions on weather data availability.

Functions in this module:

- 'curWeatherCities()': Fetches the current weather data for cities within a specified distance from a central location.
- 'curWeatherPoints()': Fetches the current weather data for specific points within a grid around a central location.

"""

def curWeatherCities(dist,lat1,lon1):

    """
    Get current weather in the respective cities that were returned by getCities in mathModule.
    
    Parameters:
        dist (float): Distance in kilometers to determine the range of cities.
        lat1 (float): Latitude of the central point.
        lon1 (float): Longitude of the central point.

    Returns:
        cities (dict): A dictionary with city names, as keys, and current weather information, as values, including the coordinates calculated previously.
    """
    base_url = 'https://api.openweathermap.org/data/2.5/weather'
    api_key = '########################'

    cities = MathOthers.getCities(dist, lat1, lon1)

    for city, coordinates in cities.items():
        lat, lon = coordinates['coord']
        
        # Set up the parameters for the API request
        paramsAdd = {
            'lat': lat,
            'lon': lon,
            'appid': api_key,
            'units': 'metric'
        }
        try:
            response = requests.get(base_url, params=paramsAdd)
            response.raise_for_status()
            weather_data = response.json()
            
            rain_current = weather_data.get('rain', {}).get('1h', 0)
            cities[city]['rain_current'] = rain_current
            
        except:
            print(f"Error fetching weather data for {city}")
            cities[city]['rain_current'] = None
    
    return cities

def curWeatherPoints(dist, lat1, lon1,radius_point):
    """
    Get current weather in the respective points that were returned by getPoints in mathModule.

    Parameters:
        dist (float): The distance in kilometers within which to generate points.
        lat1 (float): Latitude of the central location.
        lon1 (float): Longitude of the central location.
        radius_point (float): distance, in kilometers, between points

    Returns:
        points (dict): A dictionary with the several points, as keys, and current weather information, as values, including the coordinates calculated previously.
    """
    base_url = 'https://api.openweathermap.org/data/2.5/weather'
    api_key = 'cd625bdba0ced920ac5b1dc2f68a634f'
    
    points = MathOthers.getPoints(dist, lat1, lon1, radius_point)
    
    for point, coordinates in points.items():
        lat,lon = coordinates['coord']
        
        # Set up the parameters for the API request
        paramsAdd = {
            'lat': lat,
            'lon': lon,
            'appid': api_key,
            'units': 'metric'
        }
        
        try:
            response = requests.get(base_url, params=paramsAdd)
            response.raise_for_status()
            weather_data = response.json()
            
            rain_info = weather_data.get('rain', {'1h': 0})
            points[point]['rain_current'] = rain_info.get('1h', 0)
        
        except:
            print(f"Failed to fetch weather data for point {point} ({lat}, {lon})")
            points[point]['rain_current'] = None

    return points